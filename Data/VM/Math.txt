
function Math.init 0
push argument 0
pop pointer 0
push constant 404
push constant 16
call Array.new 2
pop static 0
push static 0
push constant 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 1
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 2
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 3
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 4
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 5
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 6
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 7
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 8
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 9
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 10
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 11
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 12
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 13
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 14
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return

function Math.bit 0
push argument 0
pop pointer 0
push argument 1
push static 0
push argument 2
add
pop pointer 1
push that 0
push constant 0
eq
not
return

function Math.two_to_the 0
push argument 0
pop pointer 0
push static 0
push argument 1
add
pop pointer 1
push that 0
return

function Math.abs 0
push argument 0
pop pointer 0
push argument 1
push constant 0
lt
not
if-goto IF_L198
push argument 1
neg
return
goto IF_END_196
label IF_L198
label IF_END_196
push argument 1
return

function Math.multiply 2
push argument 0
pop pointer 0
push constant 0
pop local 0
push argument 1
pop local 1
push constant 0
pop local 2
label WHILE_START_248
push local 2
push constant 16
lt
not
if-goto WHILE_END_248
push constant 404
push argument 2
push local 2
call Math.bit 3
not
if-goto IF_L257
push local 0
push local 1
add
pop local 0
goto IF_END_255
label IF_L257
label IF_END_255
push local 1
push local 1
add
pop local 1
push local 2
push constant 1
add
pop local 2
goto WHILE_START_248
label WHILE_END_248
push local 0
return

function Math.divide 3
push argument 0
pop pointer 0
push argument 1
push constant 0
lt
pop local 0
push argument 2
push constant 0
lt
pop local 1
push constant 404
push argument 1
call Math.abs 2
pop argument 1
push constant 404
push argument 2
call Math.abs 2
pop argument 2
push argument 2
push argument 1
gt
not
if-goto IF_L355
push constant 0
return
goto IF_END_353
label IF_L355
label IF_END_353
push constant 404
push argument 1
push argument 2
push argument 2
add
call Math.divide 3
pop local 2
push argument 1
push constant 2
push local 2
call Math.mult 2
push argument 2
call Math.mult 2
sub
push argument 2
lt
not
if-goto IF_L380
push local 2
push local 2
add
pop local 3
goto IF_END_378
label IF_L380
push local 2
push local 2
add
push constant 1
add
pop local 3
label IF_END_378
push local 0
push local 1
eq
not
if-goto IF_L415
push local 3
return
goto IF_END_413
label IF_L415
push local 3
neg
return
label IF_END_413

function Math.mod 1
push argument 0
pop pointer 0
push constant 404
push argument 1
push argument 2
call Math.divide 3
pop local 0
push argument 1
push local 0
push argument 2
call Math.mult 2
sub
return

function Math.sqrt 3
push argument 0
pop pointer 0
push constant 0
pop local 1
push constant 7
pop local 0
label WHILE_START_501
push local 0
push constant 0
lt
not
not
if-goto WHILE_END_501
push local 1
push static 0
push local 0
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.mult 2
pop local 3
push local 3
push argument 1
gt
not
push local 3
push constant 0
gt
not
if-goto IF_L530
push local 2
pop local 1
goto IF_END_528
label IF_L530
label IF_END_528
push local 0
push constant 1
sub
pop local 0
goto WHILE_START_501
label WHILE_END_501
push local 1
return

function Math.max 0
push argument 0
pop pointer 0
push argument 1
push argument 2
gt
not
if-goto IF_L575
push argument 1
return
goto IF_END_573
label IF_L575
push argument 2
return
label IF_END_573

function Math.min 0
push argument 0
pop pointer 0
push argument 1
push argument 2
lt
not
if-goto IF_L604
push argument 1
return
goto IF_END_602
label IF_L604
push argument 2
return
label IF_END_602
