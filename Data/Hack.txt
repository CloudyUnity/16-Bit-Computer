@256
D=A 
@SP 
M=D 
@11000
D=A 
@LCL 
M=D 
@10000
D=A 
@ARG 
M=D 
@12000
D=A 
@THIS 
M=D 
@13000
D=A 
@THAT 
M=D

@Sys.init
0;JMP 

// function Array.new 0
(Array.new) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Memory.alloc 2
@Array.new$ret.7
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Memory.alloc
0;JMP 
(Array.new$ret.7) 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Array.dispose 0
(Array.dispose) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push pointer 0
@THIS
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Memory.deAlloc 2
@Array.dispose$ret.15
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Memory.deAlloc
0;JMP 
(Array.dispose$ret.15) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Keyboard.init 0
(Keyboard.init) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 24576

// pop static 0
@24576
D=A 
@Static_0
M=D 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Keyboard.keyPressed 0
(Keyboard.keyPressed) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push static 0
@Static_0
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0

// pop pointer 1
@Static_0
A=M 
D=M 
@THAT
A=M 
M=D 

// push that 0
@THAT
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Keyboard.readChar 1
(Keyboard.readChar) 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// label WHILE_START_44
(Keyboard.readChar$WHILE_START_44)

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Keyboard.keyPressed 1
@Keyboard.readChar$ret.25
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@6
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Keyboard.keyPressed
0;JMP 
(Keyboard.readChar$ret.25) 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// eq
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Keyboard.readChar$IF_TRUE_26
D;JEQ 

@SP 
A=M-1 
M=0 
@Keyboard.readChar$IF_THEN_26
0;JMP 

(Keyboard.readChar$IF_TRUE_26) 
@SP 
A=M-1 
M=-1 
(Keyboard.readChar$IF_THEN_26) 

// not
@SP 
A=M-1 
M=!M 

// if-goto WHILE_END_44
@SP 
AM=M-1 
D=M 
@Keyboard.readChar$WHILE_END_44
D;JNE 

// goto WHILE_START_44
@Keyboard.readChar$WHILE_START_44
0;JMP 

// label WHILE_END_44
(Keyboard.readChar$WHILE_END_44)

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Keyboard.keyPressed 1
@Keyboard.readChar$ret.33
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@6
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Keyboard.keyPressed
0;JMP 
(Keyboard.readChar$ret.33) 

// pop local 0
@LCL
D=M 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// label WHILE_START_65
(Keyboard.readChar$WHILE_START_65)

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Keyboard.keyPressed 1
@Keyboard.readChar$ret.37
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@6
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Keyboard.keyPressed
0;JMP 
(Keyboard.readChar$ret.37) 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// eq
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Keyboard.readChar$IF_TRUE_38
D;JEQ 

@SP 
A=M-1 
M=0 
@Keyboard.readChar$IF_THEN_38
0;JMP 

(Keyboard.readChar$IF_TRUE_38) 
@SP 
A=M-1 
M=-1 
(Keyboard.readChar$IF_THEN_38) 

// not
@SP 
A=M-1 
M=!M 

// not
@SP 
A=M-1 
M=!M 

// if-goto WHILE_END_65
@SP 
AM=M-1 
D=M 
@Keyboard.readChar$WHILE_END_65
D;JNE 

// goto WHILE_START_65
@Keyboard.readChar$WHILE_START_65
0;JMP 

// label WHILE_END_65
(Keyboard.readChar$WHILE_END_65)

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.printChar 2
@Keyboard.readChar$ret.47
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.printChar
0;JMP 
(Keyboard.readChar$ret.47) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Keyboard.readLine 2
(Keyboard.readLine) 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.printString 2
@Keyboard.readLine$ret.57
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.printString
0;JMP 
(Keyboard.readLine$ret.57) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 50
@50
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call String.new 2
@Keyboard.readLine$ret.61
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@String.new
0;JMP 
(Keyboard.readLine$ret.61) 

// pop local 0
@LCL
D=M 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Keyboard.readChar 1
@Keyboard.readLine$ret.64
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@6
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Keyboard.readChar
0;JMP 
(Keyboard.readLine$ret.64) 

// pop local 1
@LCL
D=M+1 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// label WHILE_START_135
(Keyboard.readLine$WHILE_START_135)

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call String.newLine 1
@Keyboard.readLine$ret.69
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@6
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@String.newLine
0;JMP 
(Keyboard.readLine$ret.69) 

// eq
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Keyboard.readLine$IF_TRUE_69
D;JEQ 

@SP 
A=M-1 
M=0 
@Keyboard.readLine$IF_THEN_69
0;JMP 

(Keyboard.readLine$IF_TRUE_69) 
@SP 
A=M-1 
M=-1 
(Keyboard.readLine$IF_THEN_69) 

// not
@SP 
A=M-1 
M=!M 

// not
@SP 
A=M-1 
M=!M 

// if-goto WHILE_END_135
@SP 
AM=M-1 
D=M 
@Keyboard.readLine$WHILE_END_135
D;JNE 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call String.backSpace 1
@Keyboard.readLine$ret.76
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@6
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@String.backSpace
0;JMP 
(Keyboard.readLine$ret.76) 

// eq
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Keyboard.readLine$IF_TRUE_76
D;JEQ 

@SP 
A=M-1 
M=0 
@Keyboard.readLine$IF_THEN_76
0;JMP 

(Keyboard.readLine$IF_TRUE_76) 
@SP 
A=M-1 
M=-1 
(Keyboard.readLine$IF_THEN_76) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L151
@SP 
AM=M-1 
D=M 
@Keyboard.readLine$IF_L151
D;JNE 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call eraseLastChar 1
@Keyboard.readLine$ret.81
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@6
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@eraseLastChar
0;JMP 
(Keyboard.readLine$ret.81) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// goto IF_END_149
@Keyboard.readLine$IF_END_149
0;JMP 

// label IF_L151
(Keyboard.readLine$IF_L151)

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call appendChar 2
@Keyboard.readLine$ret.87
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@appendChar
0;JMP 
(Keyboard.readLine$ret.87) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// label IF_END_149
(Keyboard.readLine$IF_END_149)

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Keyboard.readChar 1
@Keyboard.readLine$ret.91
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@6
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Keyboard.readChar
0;JMP 
(Keyboard.readLine$ret.91) 

// pop local 1
@LCL
D=M+1 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// goto WHILE_START_135
@Keyboard.readLine$WHILE_START_135
0;JMP 

// label WHILE_END_135
(Keyboard.readLine$WHILE_END_135)

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Keyboard.readInt 1
(Keyboard.readInt) 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Keyboard.readLine 2
@Keyboard.readInt$ret.103
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Keyboard.readLine
0;JMP 
(Keyboard.readInt$ret.103) 

// pop local 0
@LCL
D=M 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call intValue 1
@Keyboard.readInt$ret.106
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@6
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@intValue
0;JMP 
(Keyboard.readInt$ret.106) 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Main.main 2
(Main.main) 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 5

// pop local 0
@LCL
D=M 
@R13 
M=D 
@5
D=A 
@R13 
A=M 
M=D 

// push constant 10

// pop local 1
@LCL
D=M+1 
@R13 
M=D 
@10
D=A 
@R13 
A=M 
M=D 

// push local 0

// push constant 1
@LCL
A=M 
M=M+1 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop local 1
@LCL
D=M+1 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Math.mult 2
@Main.main$ret.19
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Math.mult
0;JMP 
(Main.main$ret.19) 

// pop local 0
@LCL
D=M 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.printInt 2
@Main.main$ret.23
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.printInt
0;JMP 
(Main.main$ret.23) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Math.init 0
(Math.init) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 16
@16
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Array.new 2
@Math.init$ret.7
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Array.new
0;JMP 
(Math.init$ret.7) 

// pop static 0
@SP 
AM=M-1 
D=M 
@Static_0
M=D 

// push static 0
@Static_0
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0

// push constant 1

// pop temp 0
@R5
D=A 
@R13 
M=D 
D=1
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push static 0
@Static_0
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 1

// push constant 2

// pop temp 0
@R5
D=A 
@R13 
M=D 
@2
D=A 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push static 0
@Static_0
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 2

// push constant 4

// pop temp 0
@R5
D=A 
@R13 
M=D 
@4
D=A 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push static 0
@Static_0
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3

// push constant 8

// pop temp 0
@R5
D=A 
@R13 
M=D 
@8
D=A 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push static 0
@Static_0
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 4

// push constant 16

// pop temp 0
@R5
D=A 
@R13 
M=D 
@16
D=A 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push static 0
@Static_0
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 5

// push constant 32

// pop temp 0
@R5
D=A 
@R13 
M=D 
@32
D=A 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push static 0
@Static_0
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6

// push constant 64

// pop temp 0
@R5
D=A 
@R13 
M=D 
@64
D=A 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push static 0
@Static_0
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 7

// push constant 128

// pop temp 0
@R5
D=A 
@R13 
M=D 
@128
D=A 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push static 0
@Static_0
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 8

// push constant 256

// pop temp 0
@R5
D=A 
@R13 
M=D 
@256
D=A 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push static 0
@Static_0
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 9

// push constant 512

// pop temp 0
@R5
D=A 
@R13 
M=D 
@512
D=A 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push static 0
@Static_0
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 10

// push constant 1024

// pop temp 0
@R5
D=A 
@R13 
M=D 
@1024
D=A 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push static 0
@Static_0
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 11

// push constant 2048

// pop temp 0
@R5
D=A 
@R13 
M=D 
@2048
D=A 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push static 0
@Static_0
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12

// push constant 4096

// pop temp 0
@R5
D=A 
@R13 
M=D 
@4096
D=A 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push static 0
@Static_0
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 13

// push constant 8192

// pop temp 0
@R5
D=A 
@R13 
M=D 
@8192
D=A 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push static 0
@Static_0
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 14

// push constant 16384

// pop temp 0
@R5
D=A 
@R13 
M=D 
@16384
D=A 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Math.bit 0
(Math.bit) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 0
@Static_0
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 2
@2
D=A 
@ARG
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0
@THAT
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// eq
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Math.bit$IF_TRUE_141
D;JEQ 

@SP 
A=M-1 
M=0 
@Math.bit$IF_THEN_141
0;JMP 

(Math.bit$IF_TRUE_141) 
@SP 
A=M-1 
M=-1 
(Math.bit$IF_THEN_141) 

// not
@SP 
A=M-1 
M=!M 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Math.two_to_the 0
(Math.two_to_the) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push static 0
@Static_0
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0
@THAT
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Math.abs 0
(Math.abs) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// lt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Math.abs$IF_TRUE_160
D;JLT 

@SP 
A=M-1 
M=0 
@Math.abs$IF_THEN_160
0;JMP 

(Math.abs$IF_TRUE_160) 
@SP 
A=M-1 
M=-1 
(Math.abs$IF_THEN_160) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L198
@SP 
AM=M-1 
D=M 
@Math.abs$IF_L198
D;JNE 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// neg
@SP 
AM=M-1 
M=-M 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// goto IF_END_196
@Math.abs$IF_END_196
0;JMP 

// label IF_L198
(Math.abs$IF_L198)

// label IF_END_196
(Math.abs$IF_END_196)

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Math.multiply 2
(Math.multiply) 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 0

// pop local 0
@LCL
D=M 
@R13 
M=D 
D=0
@R13 
A=M 
M=D 

// push argument 1

// pop local 1
@LCL
D=M+1 
@R13 
M=D 
@ARG
A=M+1 
D=M 
@R13 
A=M 
M=D 

// push constant 0

// pop local 2
@LCL
D=M 
@2
D=A+D 
@R13 
M=D 
D=0
@R13 
A=M 
M=D 

// label WHILE_START_248
(Math.multiply$WHILE_START_248)

// push local 2
@2
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 16
@16
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// lt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Math.multiply$IF_TRUE_184
D;JLT 

@SP 
A=M-1 
M=0 
@Math.multiply$IF_THEN_184
0;JMP 

(Math.multiply$IF_TRUE_184) 
@SP 
A=M-1 
M=-1 
(Math.multiply$IF_THEN_184) 

// not
@SP 
A=M-1 
M=!M 

// if-goto WHILE_END_248
@SP 
AM=M-1 
D=M 
@Math.multiply$WHILE_END_248
D;JNE 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 2
@2
D=A 
@ARG
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 2
@2
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Math.bit 3
@Math.multiply$ret.191
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@8
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Math.bit
0;JMP 
(Math.multiply$ret.191) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L257
@SP 
AM=M-1 
D=M 
@Math.multiply$IF_L257
D;JNE 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop local 0
@LCL
D=M 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// goto IF_END_255
@Math.multiply$IF_END_255
0;JMP 

// label IF_L257
(Math.multiply$IF_L257)

// label IF_END_255
(Math.multiply$IF_END_255)

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop local 1
@LCL
D=M+1 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push local 2
@2
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 1
D=1
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop local 2
@LCL
D=M 
@2
D=A+D 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// goto WHILE_START_248
@Math.multiply$WHILE_START_248
0;JMP 

// label WHILE_END_248
(Math.multiply$WHILE_END_248)

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Math.divide 3
(Math.divide) 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// lt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Math.divide$IF_TRUE_218
D;JLT 

@SP 
A=M-1 
M=0 
@Math.divide$IF_THEN_218
0;JMP 

(Math.divide$IF_TRUE_218) 
@SP 
A=M-1 
M=-1 
(Math.divide$IF_THEN_218) 

// pop local 0
@LCL
D=M 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push argument 2
@2
D=A 
@ARG
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// lt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Math.divide$IF_TRUE_222
D;JLT 

@SP 
A=M-1 
M=0 
@Math.divide$IF_THEN_222
0;JMP 

(Math.divide$IF_TRUE_222) 
@SP 
A=M-1 
M=-1 
(Math.divide$IF_THEN_222) 

// pop local 1
@LCL
D=M+1 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Math.abs 2
@Math.divide$ret.227
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Math.abs
0;JMP 
(Math.divide$ret.227) 

// pop argument 1
@ARG
D=M+1 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 2
@2
D=A 
@ARG
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Math.abs 2
@Math.divide$ret.231
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Math.abs
0;JMP 
(Math.divide$ret.231) 

// pop argument 2
@ARG
D=M 
@2
D=A+D 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push argument 2
@2
D=A 
@ARG
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// gt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Math.divide$IF_TRUE_234
D;JGT 

@SP 
A=M-1 
M=0 
@Math.divide$IF_THEN_234
0;JMP 

(Math.divide$IF_TRUE_234) 
@SP 
A=M-1 
M=-1 
(Math.divide$IF_THEN_234) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L355
@SP 
AM=M-1 
D=M 
@Math.divide$IF_L355
D;JNE 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// goto IF_END_353
@Math.divide$IF_END_353
0;JMP 

// label IF_L355
(Math.divide$IF_L355)

// label IF_END_353
(Math.divide$IF_END_353)

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 2
@2
D=A 
@ARG
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 2
@2
D=A 
@ARG
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// call Math.divide 3
@Math.divide$ret.248
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@8
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Math.divide
0;JMP 
(Math.divide$ret.248) 

// pop local 2
@LCL
D=M 
@2
D=A+D 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 2
@2
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 2
@2
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Math.mult 2
@Math.divide$ret.253
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Math.mult
0;JMP 
(Math.divide$ret.253) 

// push argument 2
@2
D=A 
@ARG
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Math.mult 2
@Math.divide$ret.255
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Math.mult
0;JMP 
(Math.divide$ret.255) 

// sub
@SP 
A=M-1 
D=M 
A=A-1 
M=M-D 
@SP 
M=M-1 

// push argument 2
@2
D=A 
@ARG
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// lt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Math.divide$IF_TRUE_257
D;JLT 

@SP 
A=M-1 
M=0 
@Math.divide$IF_THEN_257
0;JMP 

(Math.divide$IF_TRUE_257) 
@SP 
A=M-1 
M=-1 
(Math.divide$IF_THEN_257) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L380
@SP 
AM=M-1 
D=M 
@Math.divide$IF_L380
D;JNE 

// push local 2
@2
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 2
@2
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop local 3
@LCL
D=M 
@3
D=A+D 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// goto IF_END_378
@Math.divide$IF_END_378
0;JMP 

// label IF_L380
(Math.divide$IF_L380)

// push local 2
@2
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 2
@2
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push constant 1
D=1
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop local 3
@LCL
D=M 
@3
D=A+D 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// label IF_END_378
(Math.divide$IF_END_378)

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// eq
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Math.divide$IF_TRUE_275
D;JEQ 

@SP 
A=M-1 
M=0 
@Math.divide$IF_THEN_275
0;JMP 

(Math.divide$IF_TRUE_275) 
@SP 
A=M-1 
M=-1 
(Math.divide$IF_THEN_275) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L415
@SP 
AM=M-1 
D=M 
@Math.divide$IF_L415
D;JNE 

// push local 3
@3
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// goto IF_END_413
@Math.divide$IF_END_413
0;JMP 

// label IF_L415
(Math.divide$IF_L415)

// push local 3
@3
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// neg
@SP 
AM=M-1 
M=-M 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// label IF_END_413
(Math.divide$IF_END_413)

// function Math.mod 1
(Math.mod) 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 2
@2
D=A 
@ARG
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Math.divide 3
@Math.mod$ret.294
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@8
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Math.divide
0;JMP 
(Math.mod$ret.294) 

// pop local 0
@LCL
D=M 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 2
@2
D=A 
@ARG
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Math.mult 2
@Math.mod$ret.299
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Math.mult
0;JMP 
(Math.mod$ret.299) 

// sub
@SP 
A=M-1 
D=M 
A=A-1 
M=M-D 
@SP 
M=M-1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Math.sqrt 3
(Math.sqrt) 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 0

// pop local 1
@LCL
D=M+1 
@R13 
M=D 
D=0
@R13 
A=M 
M=D 

// push constant 7

// pop local 0
@LCL
D=M 
@R13 
M=D 
@7
D=A 
@R13 
A=M 
M=D 

// label WHILE_START_501
(Math.sqrt$WHILE_START_501)

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// lt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Math.sqrt$IF_TRUE_312
D;JLT 

@SP 
A=M-1 
M=0 
@Math.sqrt$IF_THEN_312
0;JMP 

(Math.sqrt$IF_TRUE_312) 
@SP 
A=M-1 
M=-1 
(Math.sqrt$IF_THEN_312) 

// not
@SP 
A=M-1 
M=!M 

// not
@SP 
A=M-1 
M=!M 

// if-goto WHILE_END_501
@SP 
AM=M-1 
D=M 
@Math.sqrt$WHILE_END_501
D;JNE 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 0
@Static_0
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0
@THAT
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop local 2
@LCL
D=M 
@2
D=A+D 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push local 2
@2
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 2
@2
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Math.mult 2
@Math.sqrt$ret.327
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Math.mult
0;JMP 
(Math.sqrt$ret.327) 

// pop local 3
@LCL
D=M 
@3
D=A+D 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push local 3
@3
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// gt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Math.sqrt$IF_TRUE_330
D;JGT 

@SP 
A=M-1 
M=0 
@Math.sqrt$IF_THEN_330
0;JMP 

(Math.sqrt$IF_TRUE_330) 
@SP 
A=M-1 
M=-1 
(Math.sqrt$IF_THEN_330) 

// not
@SP 
A=M-1 
M=!M 

// push local 3
@3
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// gt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Math.sqrt$IF_TRUE_334
D;JGT 

@SP 
A=M-1 
M=0 
@Math.sqrt$IF_THEN_334
0;JMP 

(Math.sqrt$IF_TRUE_334) 
@SP 
A=M-1 
M=-1 
(Math.sqrt$IF_THEN_334) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L530
@SP 
AM=M-1 
D=M 
@Math.sqrt$IF_L530
D;JNE 

// push local 2

// pop local 1
@LCL
D=M+1 
@R13 
M=D 
@2
D=A 
@LCL
A=M+D 
D=M 
@R13 
A=M 
M=D 

// goto IF_END_528
@Math.sqrt$IF_END_528
0;JMP 

// label IF_L530
(Math.sqrt$IF_L530)

// label IF_END_528
(Math.sqrt$IF_END_528)

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 1
D=1
@SP 
A=M 
M=D 
@SP 
M=M+1 

// sub
@SP 
A=M-1 
D=M 
A=A-1 
M=M-D 
@SP 
M=M-1 

// pop local 0
@LCL
D=M 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// goto WHILE_START_501
@Math.sqrt$WHILE_START_501
0;JMP 

// label WHILE_END_501
(Math.sqrt$WHILE_END_501)

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Math.max 0
(Math.max) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 2
@2
D=A 
@ARG
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// gt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Math.max$IF_TRUE_356
D;JGT 

@SP 
A=M-1 
M=0 
@Math.max$IF_THEN_356
0;JMP 

(Math.max$IF_TRUE_356) 
@SP 
A=M-1 
M=-1 
(Math.max$IF_THEN_356) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L575
@SP 
AM=M-1 
D=M 
@Math.max$IF_L575
D;JNE 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// goto IF_END_573
@Math.max$IF_END_573
0;JMP 

// label IF_L575
(Math.max$IF_L575)

// push argument 2
@2
D=A 
@ARG
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// label IF_END_573
(Math.max$IF_END_573)

// function Math.min 0
(Math.min) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 2
@2
D=A 
@ARG
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// lt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Math.min$IF_TRUE_372
D;JLT 

@SP 
A=M-1 
M=0 
@Math.min$IF_THEN_372
0;JMP 

(Math.min$IF_TRUE_372) 
@SP 
A=M-1 
M=-1 
(Math.min$IF_THEN_372) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L604
@SP 
AM=M-1 
D=M 
@Math.min$IF_L604
D;JNE 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// goto IF_END_602
@Math.min$IF_END_602
0;JMP 

// label IF_L604
(Math.min$IF_L604)

// push argument 2
@2
D=A 
@ARG
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// label IF_END_602
(Math.min$IF_END_602)

// function Memory.init 0
(Memory.init) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 0

// pop static 0
D=0
@Static_0
M=D 

// push constant 2048

// pop static 1
@2048
D=A 
@Static_1
M=D 

// push constant 16384

// pop static 2
@16384
D=A 
@Static_2
M=D 

// push constant 0

// pop static 3
D=0
@Static_3
M=D 

// push constant 1

// pop static 4
D=1
@Static_4
M=D 

// push constant 1
D=1
@SP 
A=M 
M=D 
@SP 
M=M+1 

// neg
@SP 
AM=M-1 
M=-M 
@SP 
M=M+1 

// pop static 5
@SP 
AM=M-1 
D=M 
@Static_5
M=D 

// push static 1
@Static_1
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 3
@Static_3
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push constant 16384
@16384
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 2048
@2048
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// sub
@SP 
A=M-1 
D=M 
A=A-1 
M=M-D 
@SP 
M=M-1 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push static 1
@Static_1
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 4
@Static_4
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push constant 0

// pop temp 0
@R5
D=A 
@R13 
M=D 
D=0
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Memory.peek 0
(Memory.peek) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push static 0
@Static_0
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0
@THAT
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Memory.poke 0
(Memory.poke) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push static 0
@Static_0
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push argument 2

// pop temp 0
@R5
D=A 
@R13 
M=D 
@2
D=A 
@ARG
A=M+D 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Memory.alloc 2
(Memory.alloc) 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Memory.best_fit 2
@Memory.alloc$ret.68
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Memory.best_fit
0;JMP 
(Memory.alloc$ret.68) 

// pop local 0
@LCL
D=M 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 2
@Static_2
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// eq
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Memory.alloc$IF_TRUE_71
D;JEQ 

@SP 
A=M-1 
M=0 
@Memory.alloc$IF_THEN_71
0;JMP 

(Memory.alloc$IF_TRUE_71) 
@SP 
A=M-1 
M=-1 
(Memory.alloc$IF_THEN_71) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L150
@SP 
AM=M-1 
D=M 
@Memory.alloc$IF_L150
D;JNE 

// push constant 0

// pop local 1
@LCL
D=M+1 
@R13 
M=D 
D=0
@R13 
A=M 
M=D 

// goto IF_END_148
@Memory.alloc$IF_END_148
0;JMP 

// label IF_L150
(Memory.alloc$IF_L150)

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// eq
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Memory.alloc$IF_TRUE_80
D;JEQ 

@SP 
A=M-1 
M=0 
@Memory.alloc$IF_THEN_80
0;JMP 

(Memory.alloc$IF_TRUE_80) 
@SP 
A=M-1 
M=-1 
(Memory.alloc$IF_THEN_80) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L165
@SP 
AM=M-1 
D=M 
@Memory.alloc$IF_L165
D;JNE 

// push static 1

// pop local 1
@LCL
D=M+1 
@R13 
M=D 
@Static_1
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Memory.do_alloc 3
@Memory.alloc$ret.89
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@8
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Memory.do_alloc
0;JMP 
(Memory.alloc$ret.89) 

// pop static 1
@SP 
AM=M-1 
D=M 
@Static_1
M=D 

// goto IF_END_163
@Memory.alloc$IF_END_163
0;JMP 

// label IF_L165
(Memory.alloc$IF_L165)

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 4
@Static_4
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0

// pop local 1
@LCL
D=M+1 
@R13 
M=D 
@THAT
A=M 
D=M 
@R13 
A=M 
M=D 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 4
@Static_4
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Memory.do_alloc 3
@Memory.alloc$ret.105
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@8
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Memory.do_alloc
0;JMP 
(Memory.alloc$ret.105) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// label IF_END_163
(Memory.alloc$IF_END_163)

// label IF_END_148
(Memory.alloc$IF_END_148)

// push local 1

// push constant 1

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Memory.best_fit 5
(Memory.best_fit) 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push static 2

// pop local 0
@LCL
D=M 
@R13 
M=D 
@Static_2
D=M 
@R13 
A=M 
M=D 

// push constant 16384
@16384
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 2048
@2048
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// sub
@SP 
A=M-1 
D=M 
A=A-1 
M=M-D 
@SP 
M=M-1 

// pop local 3
@LCL
D=M 
@3
D=A+D 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push static 1

// pop local 2
@LCL
D=M 
@2
D=A+D 
@R13 
M=D 
@Static_1
D=M 
@R13 
A=M 
M=D 

// push constant 0

// pop local 1
@LCL
D=M+1 
@R13 
M=D 
D=0
@R13 
A=M 
M=D 

// label WHILE_START_271
(Memory.best_fit$WHILE_START_271)

// push local 2
@2
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// eq
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Memory.best_fit$IF_TRUE_132
D;JEQ 

@SP 
A=M-1 
M=0 
@Memory.best_fit$IF_THEN_132
0;JMP 

(Memory.best_fit$IF_TRUE_132) 
@SP 
A=M-1 
M=-1 
(Memory.best_fit$IF_THEN_132) 

// not
@SP 
A=M-1 
M=!M 

// not
@SP 
A=M-1 
M=!M 

// if-goto WHILE_END_271
@SP 
AM=M-1 
D=M 
@Memory.best_fit$WHILE_END_271
D;JNE 

// push local 2
@2
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 3
@Static_3
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0
@THAT
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 1
D=1
@SP 
A=M 
M=D 
@SP 
M=M+1 

// sub
@SP 
A=M-1 
D=M 
A=A-1 
M=M-D 
@SP 
M=M-1 

// pop local 4
@LCL
D=M 
@4
D=A+D 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push local 4
@4
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// lt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Memory.best_fit$IF_TRUE_146
D;JLT 

@SP 
A=M-1 
M=0 
@Memory.best_fit$IF_THEN_146
0;JMP 

(Memory.best_fit$IF_TRUE_146) 
@SP 
A=M-1 
M=-1 
(Memory.best_fit$IF_THEN_146) 

// not
@SP 
A=M-1 
M=!M 

// push local 4
@4
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 3
@3
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// lt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Memory.best_fit$IF_TRUE_150
D;JLT 

@SP 
A=M-1 
M=0 
@Memory.best_fit$IF_THEN_150
0;JMP 

(Memory.best_fit$IF_TRUE_150) 
@SP 
A=M-1 
M=-1 
(Memory.best_fit$IF_THEN_150) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L293
@SP 
AM=M-1 
D=M 
@Memory.best_fit$IF_L293
D;JNE 

// push local 1

// pop local 0
@LCL
D=M 
@R13 
M=D 
@LCL
A=M+1 
D=M 
@R13 
A=M 
M=D 

// push local 4

// pop local 3
@LCL
D=M 
@3
D=A+D 
@R13 
M=D 
@4
D=A 
@LCL
A=M+D 
D=M 
@R13 
A=M 
M=D 

// goto IF_END_291
@Memory.best_fit$IF_END_291
0;JMP 

// label IF_L293
(Memory.best_fit$IF_L293)

// label IF_END_291
(Memory.best_fit$IF_END_291)

// push local 2

// pop local 1
@LCL
D=M+1 
@R13 
M=D 
@2
D=A 
@LCL
A=M+D 
D=M 
@R13 
A=M 
M=D 

// push local 2
@2
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 4
@Static_4
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0

// pop local 2
@LCL
D=M 
@2
D=A+D 
@R13 
M=D 
@THAT
A=M 
D=M 
@R13 
A=M 
M=D 

// goto WHILE_START_271
@Memory.best_fit$WHILE_START_271
0;JMP 

// label WHILE_END_271
(Memory.best_fit$WHILE_END_271)

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Memory.do_alloc 2
(Memory.do_alloc) 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 3
@Static_3
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0
@THAT
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 2
@2
D=A 
@ARG
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 1
D=1
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push constant 2
@2
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// gt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Memory.do_alloc$IF_TRUE_186
D;JGT 

@SP 
A=M-1 
M=0 
@Memory.do_alloc$IF_THEN_186
0;JMP 

(Memory.do_alloc$IF_TRUE_186) 
@SP 
A=M-1 
M=-1 
(Memory.do_alloc$IF_THEN_186) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L357
@SP 
AM=M-1 
D=M 
@Memory.do_alloc$IF_L357
D;JNE 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 2
@2
D=A 
@ARG
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push constant 1
D=1
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop local 0
@LCL
D=M 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 4
@Static_4
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 4
@Static_4
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0

// pop temp 0
@R5
D=A 
@R13 
M=D 
@THAT
A=M 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 3
@Static_3
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 3
@Static_3
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0
@THAT
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// sub
@SP 
A=M-1 
D=M 
A=A-1 
M=M-D 
@SP 
M=M-1 

// sub
@SP 
A=M-1 
D=M 
A=A-1 
M=M-D 
@SP 
M=M-1 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push argument 1

// push constant 1
@ARG
A=M+1 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 5
@Static_5
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push argument 2
@2
D=A 
@ARG
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 1
D=1
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// goto IF_END_355
@Memory.do_alloc$IF_END_355
0;JMP 

// label IF_L357
(Memory.do_alloc$IF_L357)

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 4
@Static_4
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0

// pop local 0
@LCL
D=M 
@R13 
M=D 
@THAT
A=M 
D=M 
@R13 
A=M 
M=D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 3
@Static_3
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0

// pop local 1
@LCL
D=M+1 
@R13 
M=D 
@THAT
A=M 
D=M 
@R13 
A=M 
M=D 

// push argument 1

// push constant 1
@ARG
A=M+1 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 5
@Static_5
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push local 1

// pop temp 0
@R5
D=A 
@R13 
M=D 
@LCL
A=M+1 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// label IF_END_355
(Memory.do_alloc$IF_END_355)

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Memory.deAlloc 3
(Memory.deAlloc) 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 5
@Static_5
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0

// pop local 0
@LCL
D=M 
@R13 
M=D 
@THAT
A=M 
D=M 
@R13 
A=M 
M=D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 1
D=1
@SP 
A=M 
M=D 
@SP 
M=M+1 

// sub
@SP 
A=M-1 
D=M 
A=A-1 
M=M-D 
@SP 
M=M-1 

// pop argument 1
@ARG
D=M+1 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Memory.find_prev_free 2
@Memory.deAlloc$ret.283
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Memory.find_prev_free
0;JMP 
(Memory.deAlloc$ret.283) 

// pop local 1
@LCL
D=M+1 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// eq
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Memory.deAlloc$IF_TRUE_286
D;JEQ 

@SP 
A=M-1 
M=0 
@Memory.deAlloc$IF_THEN_286
0;JMP 

(Memory.deAlloc$IF_TRUE_286) 
@SP 
A=M-1 
M=-1 
(Memory.deAlloc$IF_THEN_286) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L511
@SP 
AM=M-1 
D=M 
@Memory.deAlloc$IF_L511
D;JNE 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 3
@Static_3
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push local 0

// pop temp 0
@R5
D=A 
@R13 
M=D 
@LCL
A=M 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 4
@Static_4
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push static 1

// pop temp 0
@R5
D=A 
@R13 
M=D 
@Static_1
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push argument 1

// pop static 1
@ARG
A=M+1 
D=M 
@Static_1
M=D 

// push argument 1

// pop local 1
@LCL
D=M+1 
@R13 
M=D 
@ARG
A=M+1 
D=M 
@R13 
A=M 
M=D 

// goto IF_END_509
@Memory.deAlloc$IF_END_509
0;JMP 

// label IF_L511
(Memory.deAlloc$IF_L511)

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 3
@Static_3
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0
@THAT
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// eq
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Memory.deAlloc$IF_TRUE_319
D;JEQ 

@SP 
A=M-1 
M=0 
@Memory.deAlloc$IF_THEN_319
0;JMP 

(Memory.deAlloc$IF_TRUE_319) 
@SP 
A=M-1 
M=-1 
(Memory.deAlloc$IF_THEN_319) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L547
@SP 
AM=M-1 
D=M 
@Memory.deAlloc$IF_L547
D;JNE 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 3
@Static_3
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 3
@Static_3
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0
@THAT
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// goto IF_END_545
@Memory.deAlloc$IF_END_545
0;JMP 

// label IF_L547
(Memory.deAlloc$IF_L547)

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 3
@Static_3
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push local 0

// pop temp 0
@R5
D=A 
@R13 
M=D 
@LCL
A=M 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 4
@Static_4
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 4
@Static_4
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0

// pop temp 0
@R5
D=A 
@R13 
M=D 
@THAT
A=M 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 4
@Static_4
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push argument 1

// pop temp 0
@R5
D=A 
@R13 
M=D 
@ARG
A=M+1 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push argument 1

// pop local 1
@LCL
D=M+1 
@R13 
M=D 
@ARG
A=M+1 
D=M 
@R13 
A=M 
M=D 

// label IF_END_545
(Memory.deAlloc$IF_END_545)

// label IF_END_509
(Memory.deAlloc$IF_END_509)

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 3
@Static_3
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0
@THAT
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 4
@Static_4
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0
@THAT
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// eq
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Memory.deAlloc$IF_TRUE_382
D;JEQ 

@SP 
A=M-1 
M=0 
@Memory.deAlloc$IF_THEN_382
0;JMP 

(Memory.deAlloc$IF_TRUE_382) 
@SP 
A=M-1 
M=-1 
(Memory.deAlloc$IF_THEN_382) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L611
@SP 
AM=M-1 
D=M 
@Memory.deAlloc$IF_L611
D;JNE 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 4
@Static_4
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0

// pop local 2
@LCL
D=M 
@2
D=A+D 
@R13 
M=D 
@THAT
A=M 
D=M 
@R13 
A=M 
M=D 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 3
@Static_3
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 3
@Static_3
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0
@THAT
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 2
@2
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 3
@Static_3
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0
@THAT
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 4
@Static_4
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push local 2
@2
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 4
@Static_4
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0

// pop temp 0
@R5
D=A 
@R13 
M=D 
@THAT
A=M 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// goto IF_END_609
@Memory.deAlloc$IF_END_609
0;JMP 

// label IF_L611
(Memory.deAlloc$IF_L611)

// label IF_END_609
(Memory.deAlloc$IF_END_609)

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Memory.find_prev_free 1
(Memory.find_prev_free) 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push static 1
@Static_1
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// gt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Memory.find_prev_free$IF_TRUE_432
D;JGT 

@SP 
A=M-1 
M=0 
@Memory.find_prev_free$IF_THEN_432
0;JMP 

(Memory.find_prev_free$IF_TRUE_432) 
@SP 
A=M-1 
M=-1 
(Memory.find_prev_free$IF_THEN_432) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L679
@SP 
AM=M-1 
D=M 
@Memory.find_prev_free$IF_L679
D;JNE 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// goto IF_END_677
@Memory.find_prev_free$IF_END_677
0;JMP 

// label IF_L679
(Memory.find_prev_free$IF_L679)

// label IF_END_677
(Memory.find_prev_free$IF_END_677)

// push static 1

// pop local 0
@LCL
D=M 
@R13 
M=D 
@Static_1
D=M 
@R13 
A=M 
M=D 

// label WHILE_START_693
(Memory.find_prev_free$WHILE_START_693)

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 4
@Static_4
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0
@THAT
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// eq
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Memory.find_prev_free$IF_TRUE_449
D;JEQ 

@SP 
A=M-1 
M=0 
@Memory.find_prev_free$IF_THEN_449
0;JMP 

(Memory.find_prev_free$IF_TRUE_449) 
@SP 
A=M-1 
M=-1 
(Memory.find_prev_free$IF_THEN_449) 

// not
@SP 
A=M-1 
M=!M 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 4
@Static_4
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0
@THAT
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// lt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Memory.find_prev_free$IF_TRUE_457
D;JLT 

@SP 
A=M-1 
M=0 
@Memory.find_prev_free$IF_THEN_457
0;JMP 

(Memory.find_prev_free$IF_TRUE_457) 
@SP 
A=M-1 
M=-1 
(Memory.find_prev_free$IF_THEN_457) 

// not
@SP 
A=M-1 
M=!M 

// if-goto WHILE_END_693
@SP 
AM=M-1 
D=M 
@Memory.find_prev_free$WHILE_END_693
D;JNE 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 4
@Static_4
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0

// pop local 0
@LCL
D=M 
@R13 
M=D 
@THAT
A=M 
D=M 
@R13 
A=M 
M=D 

// goto WHILE_START_693
@Memory.find_prev_free$WHILE_START_693
0;JMP 

// label WHILE_END_693
(Memory.find_prev_free$WHILE_END_693)

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Output.init 0
(Output.init) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 16384

// pop static 3
@16384
D=A 
@Static_3
M=D 

// push constant 0

// pop static 1
D=0
@Static_1
M=D 

// push constant 0

// pop static 2
D=0
@Static_2
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 2
@2
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Array.new 2
@Output.init$ret.13
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Array.new
0;JMP 
(Output.init$ret.13) 

// pop static 4
@SP 
AM=M-1 
D=M 
@Static_4
M=D 

// push static 4
@Static_4
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push constant 255

// pop temp 0
@R5
D=A 
@R13 
M=D 
@255
D=A 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push static 4
@Static_4
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 1
D=1
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push constant 1
D=1
@SP 
A=M 
M=D 
@SP 
M=M+1 

// neg
@SP 
AM=M-1 
M=-M 
@SP 
M=M+1 

// push constant 255

// pop temp 0
@R5
D=A 
@R13 
M=D 
@255
D=A 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.initMap 1
@Output.init$ret.34
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@6
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.initMap
0;JMP 
(Output.init$ret.34) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Output.initMap 1
(Output.initMap) 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 127
@127
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Array.new 2
@Output.initMap$ret.44
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Array.new
0;JMP 
(Output.initMap$ret.44) 

// pop static 0
@SP 
AM=M-1 
D=M 
@Static_0
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.59
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.59) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 32
@32
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.74
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.74) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 33
@33
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.89
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.89) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 34
@34
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 54
@54
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 54
@54
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 20
@20
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.104
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.104) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 35
@35
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 18
@18
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 18
@18
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 18
@18
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 18
@18
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 18
@18
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 18
@18
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.119
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.119) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 36
@36
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.134
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.134) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 37
@37
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 35
@35
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 49
@49
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.149
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.149) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 38
@38
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 54
@54
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 27
@27
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 27
@27
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 27
@27
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 54
@54
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.164
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.164) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 39
@39
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.179
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.179) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 40
@40
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.194
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.194) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 41
@41
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.209
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.209) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 42
@42
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.224
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.224) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 43
@43
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.239
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.239) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 44
@44
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.254
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.254) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 45
@45
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.269
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.269) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 46
@46
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.284
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.284) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 47
@47
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 32
@32
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 1
D=1
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.299
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.299) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.314
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.314) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 49
@49
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 14
@14
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 15
@15
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.329
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.329) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 50
@50
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.344
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.344) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 28
@28
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.359
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.359) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 52
@52
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 16
@16
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 28
@28
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 26
@26
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 25
@25
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 60
@60
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.374
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.374) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 53
@53
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 31
@31
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.389
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.389) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 54
@54
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 28
@28
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 31
@31
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.404) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 55
@55
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 49
@49
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.419
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.419) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 56
@56
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.434
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.434) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 57
@57
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 62
@62
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 14
@14
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.449
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.449) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 58
@58
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.464
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.464) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 59
@59
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.479
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.479) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 60
@60
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.494
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.494) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 61
@61
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.509
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.509) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 62
@62
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.524
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.524) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 64
@64
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 59
@59
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 59
@59
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 59
@59
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 27
@27
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.539
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.539) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.554
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.554) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 65
@65
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.569
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.569) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 66
@66
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 31
@31
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 31
@31
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 31
@31
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.584
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.584) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 67
@67
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 28
@28
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 54
@54
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 35
@35
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 35
@35
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 54
@54
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 28
@28
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.599
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.599) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 68
@68
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 15
@15
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 27
@27
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 27
@27
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 15
@15
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.614
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.614) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 69
@69
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 35
@35
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 11
@11
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 15
@15
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 11
@11
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 35
@35
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.629
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.629) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 70
@70
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 35
@35
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 11
@11
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 15
@15
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 11
@11
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.644
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.644) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 71
@71
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 28
@28
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 54
@54
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 35
@35
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 59
@59
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 54
@54
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 44
@44
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.659
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.659) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 72
@72
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.674
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.674) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 73
@73
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.689
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.689) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 74
@74
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 60
@60
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 27
@27
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 27
@27
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 14
@14
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.704
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.704) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 75
@75
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 27
@27
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 15
@15
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 27
@27
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.719
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.719) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 76
@76
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 35
@35
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.734
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.734) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 77
@77
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 33
@33
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.749
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.749) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 78
@78
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 55
@55
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 55
@55
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 59
@59
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 59
@59
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.764
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.764) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 79
@79
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.779
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.779) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 80
@80
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 31
@31
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 31
@31
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.794
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.794) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 81
@81
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 59
@59
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.809
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.809) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 82
@82
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 31
@31
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 31
@31
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 27
@27
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.824
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.824) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 83
@83
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 28
@28
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.839
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.839) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 84
@84
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 45
@45
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.854
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.854) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 85
@85
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.869
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.869) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 86
@86
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.884
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.884) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 87
@87
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 18
@18
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.899
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.899) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 88
@88
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.914
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.914) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 89
@89
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.929
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.929) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 90
@90
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 49
@49
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 35
@35
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.944
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.944) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 91
@91
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.959
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.959) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 92
@92
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 1
D=1
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 32
@32
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.974
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.974) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 93
@93
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.989
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.989) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 94
@94
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 8
@8
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 28
@28
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 54
@54
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1004
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1004) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 95
@95
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1019
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1019) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 96
@96
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1034
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1034) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 97
@97
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 14
@14
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 27
@27
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 27
@27
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 54
@54
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1049
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1049) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 98
@98
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 15
@15
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 27
@27
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1064
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1064) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 99
@99
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1079
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1079) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 100
@100
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 60
@60
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 54
@54
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1094
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1094) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 101
@101
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1109
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1109) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 102
@102
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 28
@28
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 54
@54
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 38
@38
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 15
@15
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 15
@15
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1124
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1124) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 103
@103
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 62
@62
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1139
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1139) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 104
@104
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 27
@27
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 55
@55
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1154
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1154) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 105
@105
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 14
@14
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1169
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1169) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 106
@106
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 56
@56
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1184
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1184) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 107
@107
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 27
@27
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 15
@15
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 15
@15
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 27
@27
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1199
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1199) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 108
@108
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 14
@14
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1214
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1214) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 109
@109
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 29
@29
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 43
@43
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 43
@43
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 43
@43
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 43
@43
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1229
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1229) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 110
@110
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 29
@29
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1244
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1244) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 111
@111
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1259
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1259) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 112
@112
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 31
@31
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1274
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1274) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 113
@113
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 62
@62
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1289
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1289) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 114
@114
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 29
@29
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 55
@55
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 7
@7
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1304
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1304) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 115
@115
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1319
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1319) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 116
@116
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 4
@4
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 15
@15
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 54
@54
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 28
@28
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1334
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1334) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 117
@117
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 27
@27
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 27
@27
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 27
@27
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 27
@27
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 27
@27
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 54
@54
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1349
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1349) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 118
@118
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1364
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1364) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 119
@119
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 18
@18
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1379
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1379) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 120
@120
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 30
@30
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1394
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1394) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 121
@121
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 62
@62
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 24
@24
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 15
@15
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1409
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1409) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 122
@122
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 27
@27
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 6
@6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 51
@51
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1424
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1424) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 123
@123
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 56
@56
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 7
@7
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 56
@56
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1439
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1439) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 124
@124
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1454
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1454) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 125
@125
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 7
@7
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 56
@56
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 12
@12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 7
@7
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1469
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1469) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 126
@126
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 38
@38
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 45
@45
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 25
@25
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.create 13
@Output.initMap$ret.1484
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@18
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.create
0;JMP 
(Output.initMap$ret.1484) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Output.create 1
(Output.create) 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 11
@11
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Array.new 2
@Output.create$ret.1494
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Array.new
0;JMP 
(Output.create$ret.1494) 

// pop local 0
@LCL
D=M 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push static 0
@Static_0
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push local 0

// pop temp 0
@R5
D=A 
@R13 
M=D 
@LCL
A=M 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push local 0

// push constant 0

// push argument 2

// pop temp 0
@R5
D=A 
@R13 
M=D 
@2
D=A 
@ARG
A=M+D 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push local 0

// push constant 1

// push argument 3

// pop temp 0
@R5
D=A 
@R13 
M=D 
@3
D=A 
@ARG
A=M+D 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push local 0

// push constant 2

// push argument 4

// pop temp 0
@R5
D=A 
@R13 
M=D 
@4
D=A 
@ARG
A=M+D 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push local 0

// push constant 3

// push argument 5

// pop temp 0
@R5
D=A 
@R13 
M=D 
@5
D=A 
@ARG
A=M+D 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push local 0

// push constant 4

// push argument 6

// pop temp 0
@R5
D=A 
@R13 
M=D 
@6
D=A 
@ARG
A=M+D 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push local 0

// push constant 5

// push argument 7

// pop temp 0
@R5
D=A 
@R13 
M=D 
@7
D=A 
@ARG
A=M+D 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push local 0

// push constant 6

// push argument 8

// pop temp 0
@R5
D=A 
@R13 
M=D 
@8
D=A 
@ARG
A=M+D 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push local 0

// push constant 7

// push argument 9

// pop temp 0
@R5
D=A 
@R13 
M=D 
@9
D=A 
@ARG
A=M+D 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push local 0

// push constant 8

// push argument 10

// pop temp 0
@R5
D=A 
@R13 
M=D 
@10
D=A 
@ARG
A=M+D 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push local 0

// push constant 9

// push argument 11

// pop temp 0
@R5
D=A 
@R13 
M=D 
@11
D=A 
@ARG
A=M+D 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push local 0

// push constant 10

// push argument 12

// pop temp 0
@R5
D=A 
@R13 
M=D 
@12
D=A 
@ARG
A=M+D 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Output.getMap 0
(Output.getMap) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 32
@32
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// lt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Output.getMap$IF_TRUE_1599
D;JLT 

@SP 
A=M-1 
M=0 
@Output.getMap$IF_THEN_1599
0;JMP 

(Output.getMap$IF_TRUE_1599) 
@SP 
A=M-1 
M=-1 
(Output.getMap$IF_THEN_1599) 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 126
@126
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// gt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Output.getMap$IF_TRUE_1602
D;JGT 

@SP 
A=M-1 
M=0 
@Output.getMap$IF_THEN_1602
0;JMP 

(Output.getMap$IF_TRUE_1602) 
@SP 
A=M-1 
M=-1 
(Output.getMap$IF_THEN_1602) 

// or
@SP 
AM=M-1 
D=M 
A=A-1 
M=D|M 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L3148
@SP 
AM=M-1 
D=M 
@Output.getMap$IF_L3148
D;JNE 

// push constant 0

// pop argument 1
@ARG
D=M+1 
@R13 
M=D 
D=0
@R13 
A=M 
M=D 

// goto IF_END_3146
@Output.getMap$IF_END_3146
0;JMP 

// label IF_L3148
(Output.getMap$IF_L3148)

// label IF_END_3146
(Output.getMap$IF_END_3146)

// push static 0
@Static_0
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0
@THAT
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Output.moveCursor 0
(Output.moveCursor) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push argument 2

// pop static 1
@2
D=A 
@ARG
A=M+D 
D=M 
@Static_1
M=D 

// push argument 1

// pop static 2
@ARG
A=M+1 
D=M 
@Static_2
M=D 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Output.printChar 5
(Output.printChar) 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.getMap 2
@Output.printChar$ret.1634
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.getMap
0;JMP 
(Output.printChar$ret.1634) 

// pop local 0
@LCL
D=M 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push static 2
@Static_2
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 32
@32
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Math.mult 2
@Output.printChar$ret.1638
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Math.mult
0;JMP 
(Output.printChar$ret.1638) 

// push constant 11
@11
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Math.mult 2
@Output.printChar$ret.1640
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Math.mult
0;JMP 
(Output.printChar$ret.1640) 

// push static 1
@Static_1
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 2
@2
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Math.div 2
@Output.printChar$ret.1643
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Math.div
0;JMP 
(Output.printChar$ret.1643) 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop local 1
@LCL
D=M+1 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push static 1
@Static_1
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 1

// pop local 2
@LCL
D=M 
@2
D=A+D 
@R13 
M=D 
D=1
@R13 
A=M 
M=D 

// push constant 0

// pop local 4
@LCL
D=M 
@4
D=A+D 
@R13 
M=D 
D=0
@R13 
A=M 
M=D 

// label WHILE_START_3265
(Output.printChar$WHILE_START_3265)

// push local 4
@4
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 11
@11
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// lt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Output.printChar$IF_TRUE_1653
D;JLT 

@SP 
A=M-1 
M=0 
@Output.printChar$IF_THEN_1653
0;JMP 

(Output.printChar$IF_TRUE_1653) 
@SP 
A=M-1 
M=-1 
(Output.printChar$IF_THEN_1653) 

// not
@SP 
A=M-1 
M=!M 

// if-goto WHILE_END_3265
@SP 
AM=M-1 
D=M 
@Output.printChar$WHILE_END_3265
D;JNE 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 4
@4
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0

// pop local 3
@LCL
D=M 
@3
D=A+D 
@R13 
M=D 
@THAT
A=M 
D=M 
@R13 
A=M 
M=D 

// push local 2
@2
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 1
D=1
@SP 
A=M 
M=D 
@SP 
M=M+1 

// eq
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Output.printChar$IF_TRUE_1664
D;JEQ 

@SP 
A=M-1 
M=0 
@Output.printChar$IF_THEN_1664
0;JMP 

(Output.printChar$IF_TRUE_1664) 
@SP 
A=M-1 
M=-1 
(Output.printChar$IF_THEN_1664) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L3282
@SP 
AM=M-1 
D=M 
@Output.printChar$IF_L3282
D;JNE 

// push local 3
@3
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 256
@256
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Math.mult 2
@Output.printChar$ret.1670
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Math.mult
0;JMP 
(Output.printChar$ret.1670) 

// pop local 3
@LCL
D=M 
@3
D=A+D 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// goto IF_END_3280
@Output.printChar$IF_END_3280
0;JMP 

// label IF_L3282
(Output.printChar$IF_L3282)

// label IF_END_3280
(Output.printChar$IF_END_3280)

// push static 3
@Static_3
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push static 3
@Static_3
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0
@THAT
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push static 4
@Static_4
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 2
@2
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0
@THAT
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 3
@3
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// or
@SP 
AM=M-1 
D=M 
A=A-1 
M=D|M 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push local 1

// push constant 32
@32
D=A 
@LCL
A=M+1 
M=M+D 

// push local 4
@4
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 1
D=1
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop local 4
@LCL
D=M 
@4
D=A+D 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// goto WHILE_START_3265
@Output.printChar$WHILE_START_3265
0;JMP 

// label WHILE_END_3265
(Output.printChar$WHILE_END_3265)

// push static 1
@Static_1
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 63
@63
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// eq
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Output.printChar$IF_TRUE_1705
D;JEQ 

@SP 
A=M-1 
M=0 
@Output.printChar$IF_THEN_1705
0;JMP 

(Output.printChar$IF_TRUE_1705) 
@SP 
A=M-1 
M=-1 
(Output.printChar$IF_THEN_1705) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L3330
@SP 
AM=M-1 
D=M 
@Output.printChar$IF_L3330
D;JNE 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.println 1
@Output.printChar$ret.1710
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@6
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.println
0;JMP 
(Output.printChar$ret.1710) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// goto IF_END_3328
@Output.printChar$IF_END_3328
0;JMP 

// label IF_L3330
(Output.printChar$IF_L3330)

// push static 1
@Static_1
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 1
@Static_1
A=M+1 
M=M+1 

// label IF_END_3328
(Output.printChar$IF_END_3328)

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Output.printString 1
(Output.printString) 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 0

// pop local 0
@LCL
D=M 
@R13 
M=D 
D=0
@R13 
A=M 
M=D 

// label WHILE_START_3373
(Output.printString$WHILE_START_3373)

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call length 1
@Output.printString$ret.1730
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@6
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@length
0;JMP 
(Output.printString$ret.1730) 

// lt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Output.printString$IF_TRUE_1730
D;JLT 

@SP 
A=M-1 
M=0 
@Output.printString$IF_THEN_1730
0;JMP 

(Output.printString$IF_TRUE_1730) 
@SP 
A=M-1 
M=-1 
(Output.printString$IF_THEN_1730) 

// not
@SP 
A=M-1 
M=!M 

// if-goto WHILE_END_3373
@SP 
AM=M-1 
D=M 
@Output.printString$WHILE_END_3373
D;JNE 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call charAt 2
@Output.printString$ret.1737
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@charAt
0;JMP 
(Output.printString$ret.1737) 

// call Output.printChar 2
@Output.printString$ret.1738
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.printChar
0;JMP 
(Output.printString$ret.1738) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push local 0

// push constant 1
@LCL
A=M 
M=M+1 

// goto WHILE_START_3373
@Output.printString$WHILE_START_3373
0;JMP 

// label WHILE_END_3373
(Output.printString$WHILE_END_3373)

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Output.printInt 1
(Output.printInt) 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 10
@10
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call String.new 2
@Output.printInt$ret.1754
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@String.new
0;JMP 
(Output.printInt$ret.1754) 

// pop local 0
@LCL
D=M 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call setInt 2
@Output.printInt$ret.1758
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@setInt
0;JMP 
(Output.printInt$ret.1758) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.printString 2
@Output.printInt$ret.1762
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.printString
0;JMP 
(Output.printInt$ret.1762) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call dispose 1
@Output.printInt$ret.1765
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@6
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@dispose
0;JMP 
(Output.printInt$ret.1765) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Output.println 0
(Output.println) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 0

// pop static 1
D=0
@Static_1
M=D 

// push static 2
@Static_2
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 22
@22
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// lt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Output.println$IF_TRUE_1776
D;JLT 

@SP 
A=M-1 
M=0 
@Output.println$IF_THEN_1776
0;JMP 

(Output.println$IF_TRUE_1776) 
@SP 
A=M-1 
M=-1 
(Output.println$IF_THEN_1776) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L3469
@SP 
AM=M-1 
D=M 
@Output.println$IF_L3469
D;JNE 

// push static 2
@Static_2
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 1
D=1
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop static 2
@SP 
AM=M-1 
D=M 
@Static_2
M=D 

// goto IF_END_3467
@Output.println$IF_END_3467
0;JMP 

// label IF_L3469
(Output.println$IF_L3469)

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.scroll 1
@Output.println$ret.1787
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@6
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.scroll
0;JMP 
(Output.println$ret.1787) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// label IF_END_3467
(Output.println$IF_END_3467)

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Output.scroll 0
(Output.scroll) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 0

// pop static 1
D=0
@Static_1
M=D 

// push constant 0

// pop static 2
D=0
@Static_2
M=D 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Output.backSpace 0
(Output.backSpace) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push static 1
@Static_1
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// eq
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Output.backSpace$IF_TRUE_1807
D;JEQ 

@SP 
A=M-1 
M=0 
@Output.backSpace$IF_THEN_1807
0;JMP 

(Output.backSpace$IF_TRUE_1807) 
@SP 
A=M-1 
M=-1 
(Output.backSpace$IF_THEN_1807) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L3522
@SP 
AM=M-1 
D=M 
@Output.backSpace$IF_L3522
D;JNE 

// push static 2
@Static_2
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// eq
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Output.backSpace$IF_TRUE_1812
D;JEQ 

@SP 
A=M-1 
M=0 
@Output.backSpace$IF_THEN_1812
0;JMP 

(Output.backSpace$IF_TRUE_1812) 
@SP 
A=M-1 
M=-1 
(Output.backSpace$IF_THEN_1812) 

// not
@SP 
A=M-1 
M=!M 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L3529
@SP 
AM=M-1 
D=M 
@Output.backSpace$IF_L3529
D;JNE 

// push constant 63

// pop static 1
@63
D=A 
@Static_1
M=D 

// push static 2
@Static_2
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 1
D=1
@SP 
A=M 
M=D 
@SP 
M=M+1 

// sub
@SP 
A=M-1 
D=M 
A=A-1 
M=M-D 
@SP 
M=M-1 

// pop static 2
@SP 
AM=M-1 
D=M 
@Static_2
M=D 

// goto IF_END_3527
@Output.backSpace$IF_END_3527
0;JMP 

// label IF_L3529
(Output.backSpace$IF_L3529)

// label IF_END_3527
(Output.backSpace$IF_END_3527)

// goto IF_END_3520
@Output.backSpace$IF_END_3520
0;JMP 

// label IF_L3522
(Output.backSpace$IF_L3522)

// push static 1
@Static_1
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 1
D=1
@SP 
A=M 
M=D 
@SP 
M=M+1 

// sub
@SP 
A=M-1 
D=M 
A=A-1 
M=M-D 
@SP 
M=M-1 

// pop static 1
@SP 
AM=M-1 
D=M 
@Static_1
M=D 

// label IF_END_3520
(Output.backSpace$IF_END_3520)

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function String.new 0
(String.new) 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Memory.alloc 1
@String.new$ret.4
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@6
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Memory.alloc
0;JMP 
(String.new$ret.4) 

// pop pointer 0
@SP 
AM=M-1 
D=M 
@THIS
A=M 
M=D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// eq
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@String.new$IF_TRUE_7
D;JEQ 

@SP 
A=M-1 
M=0 
@String.new$IF_THEN_7
0;JMP 

(String.new$IF_TRUE_7) 
@SP 
A=M-1 
M=-1 
(String.new$IF_THEN_7) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L25
@SP 
AM=M-1 
D=M 
@String.new$IF_L25
D;JNE 

// push constant 1

// pop argument 1
@ARG
D=M+1 
@R13 
M=D 
D=1
@R13 
A=M 
M=D 

// goto IF_END_23
@String.new$IF_END_23
0;JMP 

// label IF_L25
(String.new$IF_L25)

// label IF_END_23
(String.new$IF_END_23)

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Array.new 2
@String.new$ret.18
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Array.new
0;JMP 
(String.new$ret.18) 

// pop this 0
@THIS
D=M 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push argument 1

// pop this 1
@THIS
D=M+1 
@R13 
M=D 
@ARG
A=M+1 
D=M 
@R13 
A=M 
M=D 

// push constant 0

// pop this 2
@THIS
D=M 
@2
D=A+D 
@R13 
M=D 
D=0
@R13 
A=M 
M=D 

// push pointer 0
@THIS
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function String.dispose 0
(String.dispose) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push this 0
@THIS
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Array.dispose 2
@String.dispose$ret.32
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Array.dispose
0;JMP 
(String.dispose$ret.32) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function String.length 0
(String.length) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push this 2
@2
D=A 
@THIS
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function String.charAt 0
(String.charAt) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push this 0
@THIS
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0
@THAT
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function String.setCharAt 0
(String.setCharAt) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push this 0
@THIS
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push argument 2

// pop temp 0
@R5
D=A 
@R13 
M=D 
@2
D=A 
@ARG
A=M+D 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function String.appendChar 0
(String.appendChar) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push this 2
@2
D=A 
@THIS
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push this 1
@THIS
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// lt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@String.appendChar$IF_TRUE_71
D;JLT 

@SP 
A=M-1 
M=0 
@String.appendChar$IF_THEN_71
0;JMP 

(String.appendChar$IF_TRUE_71) 
@SP 
A=M-1 
M=-1 
(String.appendChar$IF_THEN_71) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L134
@SP 
AM=M-1 
D=M 
@String.appendChar$IF_L134
D;JNE 

// push this 0
@THIS
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push this 2
@2
D=A 
@THIS
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// push argument 1

// pop temp 0
@R5
D=A 
@R13 
M=D 
@ARG
A=M+1 
D=M 
@R13 
A=M 
M=D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push temp 0

// pop that 0
@THAT
D=M 
@R13 
M=D 
@R5
D=A 
@R13 
A=M 
M=D 

// push this 2
@2
D=A 
@THIS
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 1
D=1
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop this 2
@THIS
D=M 
@2
D=A+D 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// goto IF_END_132
@String.appendChar$IF_END_132
0;JMP 

// label IF_L134
(String.appendChar$IF_L134)

// label IF_END_132
(String.appendChar$IF_END_132)

// push pointer 0
@THIS
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function String.eraseLastChar 0
(String.eraseLastChar) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push this 2
@2
D=A 
@THIS
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// gt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@String.eraseLastChar$IF_TRUE_97
D;JGT 

@SP 
A=M-1 
M=0 
@String.eraseLastChar$IF_THEN_97
0;JMP 

(String.eraseLastChar$IF_TRUE_97) 
@SP 
A=M-1 
M=-1 
(String.eraseLastChar$IF_THEN_97) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L167
@SP 
AM=M-1 
D=M 
@String.eraseLastChar$IF_L167
D;JNE 

// push this 2
@2
D=A 
@THIS
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 1
D=1
@SP 
A=M 
M=D 
@SP 
M=M+1 

// sub
@SP 
A=M-1 
D=M 
A=A-1 
M=M-D 
@SP 
M=M-1 

// pop this 2
@THIS
D=M 
@2
D=A+D 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// goto IF_END_165
@String.eraseLastChar$IF_END_165
0;JMP 

// label IF_L167
(String.eraseLastChar$IF_L167)

// label IF_END_165
(String.eraseLastChar$IF_END_165)

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function String.intValue 3
(String.intValue) 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 0

// pop local 0
@LCL
D=M 
@R13 
M=D 
D=0
@R13 
A=M 
M=D 

// push this 2
@2
D=A 
@THIS
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// gt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@String.intValue$IF_TRUE_117
D;JGT 

@SP 
A=M-1 
M=0 
@String.intValue$IF_THEN_117
0;JMP 

(String.intValue$IF_TRUE_117) 
@SP 
A=M-1 
M=-1 
(String.intValue$IF_THEN_117) 

// push this 0

// push constant 0

// pop pointer 1
@THIS
A=M 
D=M 
@THAT
A=M 
M=D 

// push that 0
@THAT
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 45
@45
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// eq
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@String.intValue$IF_TRUE_124
D;JEQ 

@SP 
A=M-1 
M=0 
@String.intValue$IF_THEN_124
0;JMP 

(String.intValue$IF_TRUE_124) 
@SP 
A=M-1 
M=-1 
(String.intValue$IF_THEN_124) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L208
@SP 
AM=M-1 
D=M 
@String.intValue$IF_L208
D;JNE 

// push constant 1
D=1
@SP 
A=M 
M=D 
@SP 
M=M+1 

// neg
@SP 
AM=M-1 
M=-M 
@SP 
M=M+1 

// pop local 2
@LCL
D=M 
@2
D=A+D 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 1

// pop local 1
@LCL
D=M+1 
@R13 
M=D 
D=1
@R13 
A=M 
M=D 

// goto IF_END_206
@String.intValue$IF_END_206
0;JMP 

// label IF_L208
(String.intValue$IF_L208)

// push constant 0

// pop local 2
@LCL
D=M 
@2
D=A+D 
@R13 
M=D 
D=0
@R13 
A=M 
M=D 

// push constant 0

// pop local 1
@LCL
D=M+1 
@R13 
M=D 
D=0
@R13 
A=M 
M=D 

// label IF_END_206
(String.intValue$IF_END_206)

// label WHILE_START_248
(String.intValue$WHILE_START_248)

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push this 2
@2
D=A 
@THIS
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// lt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@String.intValue$IF_TRUE_142
D;JLT 

@SP 
A=M-1 
M=0 
@String.intValue$IF_THEN_142
0;JMP 

(String.intValue$IF_TRUE_142) 
@SP 
A=M-1 
M=-1 
(String.intValue$IF_THEN_142) 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push this 0
@THIS
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0
@THAT
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call String.is_digit 2
@String.intValue$ret.150
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@String.is_digit
0;JMP 
(String.intValue$ret.150) 

// not
@SP 
A=M-1 
M=!M 

// if-goto WHILE_END_248
@SP 
AM=M-1 
D=M 
@String.intValue$WHILE_END_248
D;JNE 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 10
@10
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Math.mult 2
@String.intValue$ret.155
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Math.mult
0;JMP 
(String.intValue$ret.155) 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push this 0
@THIS
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop pointer 1
@SP 
AM=M-1 
D=M 
@THAT
A=M 
M=D 

// push that 0
@THAT
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call String.digit_val 2
@String.intValue$ret.162
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@String.digit_val
0;JMP 
(String.intValue$ret.162) 

// add
@SP 
AM=M-1 
D=M 
A=A-1 
M=M+D 

// pop local 0
@LCL
D=M 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push local 1

// push constant 1
@LCL
A=M+1 
M=M+1 

// goto WHILE_START_248
@String.intValue$WHILE_START_248
0;JMP 

// label WHILE_END_248
(String.intValue$WHILE_END_248)

// push local 2
@2
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L296
@SP 
AM=M-1 
D=M 
@String.intValue$IF_L296
D;JNE 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// neg
@SP 
AM=M-1 
M=-M 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// goto IF_END_294
@String.intValue$IF_END_294
0;JMP 

// label IF_L296
(String.intValue$IF_L296)

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// label IF_END_294
(String.intValue$IF_END_294)

// function String.is_digit 0
(String.is_digit) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// lt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@String.is_digit$IF_TRUE_187
D;JLT 

@SP 
A=M-1 
M=0 
@String.is_digit$IF_THEN_187
0;JMP 

(String.is_digit$IF_TRUE_187) 
@SP 
A=M-1 
M=-1 
(String.is_digit$IF_THEN_187) 

// not
@SP 
A=M-1 
M=!M 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 57
@57
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// gt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@String.is_digit$IF_TRUE_191
D;JGT 

@SP 
A=M-1 
M=0 
@String.is_digit$IF_THEN_191
0;JMP 

(String.is_digit$IF_TRUE_191) 
@SP 
A=M-1 
M=-1 
(String.is_digit$IF_THEN_191) 

// not
@SP 
A=M-1 
M=!M 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function String.digit_val 0
(String.digit_val) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 48
@48
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// sub
@SP 
A=M-1 
D=M 
A=A-1 
M=M-D 
@SP 
M=M-1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function String.digit_char 0
(String.digit_char) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push argument 1

// push constant 48

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function String.setInt 0
(String.setInt) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 0

// pop this 2
@THIS
D=M 
@2
D=A+D 
@R13 
M=D 
D=0
@R13 
A=M 
M=D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// lt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@String.setInt$IF_TRUE_218
D;JLT 

@SP 
A=M-1 
M=0 
@String.setInt$IF_THEN_218
0;JMP 

(String.setInt$IF_TRUE_218) 
@SP 
A=M-1 
M=-1 
(String.setInt$IF_THEN_218) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L378
@SP 
AM=M-1 
D=M 
@String.setInt$IF_L378
D;JNE 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// neg
@SP 
AM=M-1 
M=-M 
@SP 
M=M+1 

// pop argument 1
@ARG
D=M+1 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 45
@45
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call appendChar 2
@String.setInt$ret.227
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@appendChar
0;JMP 
(String.setInt$ret.227) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// goto IF_END_376
@String.setInt$IF_END_376
0;JMP 

// label IF_L378
(String.setInt$IF_L378)

// label IF_END_376
(String.setInt$IF_END_376)

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call do_set_int 2
@String.setInt$ret.234
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@do_set_int
0;JMP 
(String.setInt$ret.234) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function String.do_set_int 3
(String.do_set_int) 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 10
@10
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Math.div 2
@String.do_set_int$ret.244
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Math.div
0;JMP 
(String.do_set_int$ret.244) 

// pop local 0
@LCL
D=M 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 10
@10
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Math.mult 2
@String.do_set_int$ret.249
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Math.mult
0;JMP 
(String.do_set_int$ret.249) 

// sub
@SP 
A=M-1 
D=M 
A=A-1 
M=M-D 
@SP 
M=M-1 

// pop local 1
@LCL
D=M+1 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call String.digit_char 2
@String.do_set_int$ret.254
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@String.digit_char
0;JMP 
(String.do_set_int$ret.254) 

// pop local 2
@LCL
D=M 
@2
D=A+D 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 10
@10
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// lt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@String.do_set_int$IF_TRUE_257
D;JLT 

@SP 
A=M-1 
M=0 
@String.do_set_int$IF_THEN_257
0;JMP 

(String.do_set_int$IF_TRUE_257) 
@SP 
A=M-1 
M=-1 
(String.do_set_int$IF_THEN_257) 

// not
@SP 
A=M-1 
M=!M 

// if-goto IF_L455
@SP 
AM=M-1 
D=M 
@String.do_set_int$IF_L455
D;JNE 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 2
@2
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call appendChar 2
@String.do_set_int$ret.263
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@appendChar
0;JMP 
(String.do_set_int$ret.263) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// goto IF_END_453
@String.do_set_int$IF_END_453
0;JMP 

// label IF_L455
(String.do_set_int$IF_L455)

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call do_set_int 2
@String.do_set_int$ret.269
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@do_set_int
0;JMP 
(String.do_set_int$ret.269) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push local 2
@2
D=A 
@LCL
A=M+D 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call appendChar 2
@String.do_set_int$ret.273
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@appendChar
0;JMP 
(String.do_set_int$ret.273) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// label IF_END_453
(String.do_set_int$IF_END_453)

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function String.newLine 0
(String.newLine) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 128
@128
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function String.backSpace 0
(String.backSpace) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 129
@129
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function String.doubleQuote 0
(String.doubleQuote) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 34
@34
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Sys.init 0
(Sys.init) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Math.init 1
@Sys.init$ret.6
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@6
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Math.init
0;JMP 
(Sys.init$ret.6) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.init 1
@Sys.init$ret.9
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@6
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.init
0;JMP 
(Sys.init$ret.9) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Memory.init 1
@Sys.init$ret.12
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@6
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Memory.init
0;JMP 
(Sys.init$ret.12) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Main.main 1
@Sys.init$ret.15
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@6
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Main.main
0;JMP 
(Sys.init$ret.15) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Sys.halt 0
(Sys.halt) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// label WHILE_START_46
(Sys.halt$WHILE_START_46)

// push constant 1
D=1
@SP 
A=M 
M=D 
@SP 
M=M+1 

// neg
@SP 
AM=M-1 
M=-M 
@SP 
M=M+1 

// not
@SP 
A=M-1 
M=!M 

// if-goto WHILE_END_46
@SP 
AM=M-1 
D=M 
@Sys.halt$WHILE_END_46
D;JNE 

// goto WHILE_START_46
@Sys.halt$WHILE_START_46
0;JMP 

// label WHILE_END_46
(Sys.halt$WHILE_END_46)

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Sys.wait 1
(Sys.wait) 
@0 
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 0

// pop local 0
@LCL
D=M 
@R13 
M=D 
D=0
@R13 
A=M 
M=D 

// label WHILE_START_74
(Sys.wait$WHILE_START_74)

// push local 0
@LCL
A=M 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// lt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Sys.wait$IF_TRUE_40
D;JLT 

@SP 
A=M-1 
M=0 
@Sys.wait$IF_THEN_40
0;JMP 

(Sys.wait$IF_TRUE_40) 
@SP 
A=M-1 
M=-1 
(Sys.wait$IF_THEN_40) 

// not
@SP 
A=M-1 
M=!M 

// if-goto WHILE_END_74
@SP 
AM=M-1 
D=M 
@Sys.wait$WHILE_END_74
D;JNE 

// push constant 0

// pop local 1
@LCL
D=M+1 
@R13 
M=D 
D=0
@R13 
A=M 
M=D 

// label WHILE_START_86
(Sys.wait$WHILE_START_86)

// push local 1
@LCL
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 200
@200
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// lt
@SP 
AM=M-1 
D=M 
A=A-1 
D=D-M 
@Sys.wait$IF_TRUE_48
D;JLT 

@SP 
A=M-1 
M=0 
@Sys.wait$IF_THEN_48
0;JMP 

(Sys.wait$IF_TRUE_48) 
@SP 
A=M-1 
M=-1 
(Sys.wait$IF_THEN_48) 

// not
@SP 
A=M-1 
M=!M 

// if-goto WHILE_END_86
@SP 
AM=M-1 
D=M 
@Sys.wait$WHILE_END_86
D;JNE 

// push local 1

// push constant 1
@LCL
A=M+1 
M=M+1 

// goto WHILE_START_86
@Sys.wait$WHILE_START_86
0;JMP 

// label WHILE_END_86
(Sys.wait$WHILE_END_86)

// push local 0

// push constant 1
@LCL
A=M 
M=M+1 

// goto WHILE_START_74
@Sys.wait$WHILE_START_74
0;JMP 

// label WHILE_END_74
(Sys.wait$WHILE_END_74)

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 

// function Sys.error 0
(Sys.error) 

// push argument 0

// pop pointer 0
@ARG
A=M 
D=M 
@THIS
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push constant 3
@3
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call String.new 1
@Sys.error$ret.72
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@6
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@String.new
0;JMP 
(Sys.error$ret.72) 

// push constant 69
@69
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call String.appendChar 2
@Sys.error$ret.74
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@String.appendChar
0;JMP 
(Sys.error$ret.74) 

// push constant 114
@114
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call String.appendChar 2
@Sys.error$ret.76
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@String.appendChar
0;JMP 
(Sys.error$ret.76) 

// push constant 114
@114
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call String.appendChar 2
@Sys.error$ret.78
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@String.appendChar
0;JMP 
(Sys.error$ret.78) 

// call Output.printString 2
@Sys.error$ret.79
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.printString
0;JMP 
(Sys.error$ret.79) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// push argument 1
@ARG
A=M+1 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Output.printInt 2
@Sys.error$ret.83
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@7
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Output.printInt
0;JMP 
(Sys.error$ret.83) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 404
@404
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 

// call Sys.halt 1
@Sys.error$ret.86
D=A 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@LCL 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@ARG 
D=M
@SP 
A=M 
M=D 
@SP 
M=M+1 
@THIS 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1
@THAT 
D=M 
@SP 
A=M 
M=D 
@SP 
M=M+1 
@6
D=A 
@SP 
D=M-D 
@ARG 
M=D
@SP 
D=M 
@LCL 
M=D 
@Sys.halt
0;JMP 
(Sys.error$ret.86) 

// pop temp 0
@R5
D=A 
@R13 
M=D 
@SP 
AM=M-1 
D=M 
@R13 
A=M 
M=D 

// push constant 0
D=0
@SP 
A=M 
M=D 
@SP 
M=M+1 

// return
@LCL 
D=M 
@R13 
M=D 
@5 
A=D-A 
D=M 
@R14 
M=D 
@SP 
A=M-1 
D=M 
@ARG 
A=M 
M=D 
@ARG 
D=M+1 
@SP 
M=D 
@R13 
AM=M-1 
D=M 
@THAT 
M=D 
@R13 
AM=M-1 
D=M 
@THIS 
M=D 
@R13 
AM=M-1 
D=M 
@ARG 
M=D 
@R13 
AM=M-1 
D=M 
@LCL 
M=D
@R14 
A=M 
0;JMP 


(END) 
@END 
